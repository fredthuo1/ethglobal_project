import { ethers } from 'ethers';
import { GasRouterConfig } from '@hyperlane-xyz/sdk';
export declare enum TokenType {
    synthetic = "synthetic",
    syntheticUri = "syntheticUri",
    collateral = "collateral",
    collateralUri = "collateralUri",
    native = "native"
}
export type TokenMetadata = {
    name: string;
    symbol: string;
    totalSupply: ethers.BigNumberish;
};
export type ERC20Metadata = TokenMetadata & {
    decimals: number;
};
export declare const isTokenMetadata: (metadata: any) => metadata is TokenMetadata;
export declare const isErc20Metadata: (metadata: any) => metadata is ERC20Metadata;
export type SyntheticConfig = TokenMetadata & {
    type: TokenType.synthetic | TokenType.syntheticUri;
};
export type CollateralConfig = {
    type: TokenType.collateral | TokenType.collateralUri;
    token: string;
} & Partial<ERC20Metadata>;
export type NativeConfig = {
    type: TokenType.native;
};
export type TokenConfig = SyntheticConfig | CollateralConfig | NativeConfig;
export declare const isCollateralConfig: (config: TokenConfig) => config is CollateralConfig;
export declare const isSyntheticConfig: (config: TokenConfig) => config is SyntheticConfig;
export declare const isNativeConfig: (config: TokenConfig) => config is NativeConfig;
export declare const isUriConfig: (config: TokenConfig) => boolean;
export type HypERC20Config = GasRouterConfig & SyntheticConfig & ERC20Metadata;
export type HypERC20CollateralConfig = GasRouterConfig & CollateralConfig;
export type HypNativeConfig = GasRouterConfig & NativeConfig;
export type ERC20RouterConfig = HypERC20Config | HypERC20CollateralConfig | HypNativeConfig;
export type HypERC721Config = GasRouterConfig & SyntheticConfig;
export type HypERC721CollateralConfig = GasRouterConfig & CollateralConfig;
export type ERC721RouterConfig = HypERC721Config | HypERC721CollateralConfig;
//# sourceMappingURL=config.d.ts.map