"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = exports.BaseValidator = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
/**
 * Utilities for validators to construct and verify checkpoints.
 */
class BaseValidator {
    constructor(address, localDomain, mailbox) {
        this.localDomain = localDomain;
        this.address = address;
        this.mailbox = mailbox;
    }
    domainHash() {
        return (0, utils_1.domainHash)(this.localDomain, this.mailbox);
    }
    message(checkpoint, messageId) {
        let types = ['bytes32', 'bytes32', 'uint32'];
        let values = [this.domainHash(), checkpoint.root, checkpoint.index];
        if (!!messageId) {
            types.push('bytes32');
            values.push(messageId);
        }
        return ethers_1.ethers.utils.solidityPack(types, values);
    }
    messageHash(checkpoint, messageId) {
        const message = this.message(checkpoint, messageId);
        return ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.keccak256(message));
    }
    recoverAddressFromCheckpoint(checkpoint, signature, messageId) {
        const msgHash = this.messageHash(checkpoint, messageId);
        return ethers_1.ethers.utils.verifyMessage(msgHash, signature);
    }
    matchesSigner(checkpoint, signature, messageId) {
        return (this.recoverAddressFromCheckpoint(checkpoint, signature, messageId).toLowerCase() === this.address.toLowerCase());
    }
}
exports.BaseValidator = BaseValidator;
class Validator extends BaseValidator {
    constructor(signer, address, localDomain, mailbox) {
        super(address, localDomain, mailbox);
        this.signer = signer;
    }
    static async fromSigner(signer, localDomain, mailbox) {
        return new Validator(signer, await signer.getAddress(), localDomain, mailbox);
    }
    async signCheckpoint(root, index) {
        const checkpoint = {
            root,
            index,
            mailbox_address: this.mailbox,
            mailbox_domain: this.localDomain,
        };
        const msgHash = this.messageHash(checkpoint);
        const signature = await this.signer.signMessage(msgHash);
        return {
            value: checkpoint,
            signature,
        };
    }
}
exports.Validator = Validator;
//# sourceMappingURL=validator.js.map