"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockMessageDispatcher__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "messageId",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "toChainId",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "MessageDispatched",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "toChainId",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "dispatchMessage",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b5061026c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fe39827b14610030575b600080fd5b61004361003e3660046100e4565b610055565b60405190815260200160405180910390f35b6000808585858560405160200161006f9493929190610186565b604051602081830303815290604052805190602001209050853373ffffffffffffffffffffffffffffffffffffffff16827fe2f8f20ddbedfce5eb59a8b930077e7f4906a01300b9318db5f90d1c96c7b6d48888886040516100d3939291906101cc565b60405180910390a495945050505050565b600080600080606085870312156100fa57600080fd5b84359350602085013573ffffffffffffffffffffffffffffffffffffffff8116811461012557600080fd5b9250604085013567ffffffffffffffff8082111561014257600080fd5b818701915087601f83011261015657600080fd5b81358181111561016557600080fd5b88602082850101111561017757600080fd5b95989497505060200194505050565b8481527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16602082015281836034830137600091016034019081529392505050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019291505056fea26469706673582212202a31ed4b579ac56138208bd910959bee126e9802eb9bf2fc60886d3d0c2bc22b64736f6c63430008110033";
const isSuperArgs = (xs) => xs.length > 1;
class MockMessageDispatcher__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.MockMessageDispatcher__factory = MockMessageDispatcher__factory;
MockMessageDispatcher__factory.bytecode = _bytecode;
MockMessageDispatcher__factory.abi = _abi;
//# sourceMappingURL=MockMessageDispatcher__factory.js.map