import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockMessageExecutor, MockMessageExecutorInterface } from "../../../../contracts/mock/MockERC5164.sol/MockMessageExecutor";
type MockMessageExecutorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockMessageExecutor__factory extends ContractFactory {
    constructor(...args: MockMessageExecutorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<MockMessageExecutor>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): MockMessageExecutor;
    connect(signer: Signer): MockMessageExecutor__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200c09666429d18018183ea74eb90f8f4cd30f15af41c2eb093ab30910af69ed9e64736f6c63430008110033";
    static readonly abi: {
        anonymous: boolean;
        inputs: {
            indexed: boolean;
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        type: string;
    }[];
    static createInterface(): MockMessageExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockMessageExecutor;
}
export {};
//# sourceMappingURL=MockMessageExecutor__factory.d.ts.map