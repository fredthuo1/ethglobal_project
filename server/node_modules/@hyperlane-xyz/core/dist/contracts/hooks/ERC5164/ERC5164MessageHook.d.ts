import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";
export interface ERC5164MessageHookInterface extends utils.Interface {
    functions: {
        "destinationDomain()": FunctionFragment;
        "dispatcher()": FunctionFragment;
        "ism()": FunctionFragment;
        "postDispatch(uint32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "destinationDomain" | "dispatcher" | "ism" | "postDispatch"): FunctionFragment;
    encodeFunctionData(functionFragment: "destinationDomain", values?: undefined): string;
    encodeFunctionData(functionFragment: "dispatcher", values?: undefined): string;
    encodeFunctionData(functionFragment: "ism", values?: undefined): string;
    encodeFunctionData(functionFragment: "postDispatch", values: [BigNumberish, BytesLike]): string;
    decodeFunctionResult(functionFragment: "destinationDomain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dispatcher", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ism", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "postDispatch", data: BytesLike): Result;
    events: {};
}
export interface ERC5164MessageHook extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ERC5164MessageHookInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        destinationDomain(overrides?: CallOverrides): Promise<[number]>;
        dispatcher(overrides?: CallOverrides): Promise<[string]>;
        ism(overrides?: CallOverrides): Promise<[string]>;
        postDispatch(_destinationDomain: BigNumberish, _messageId: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    destinationDomain(overrides?: CallOverrides): Promise<number>;
    dispatcher(overrides?: CallOverrides): Promise<string>;
    ism(overrides?: CallOverrides): Promise<string>;
    postDispatch(_destinationDomain: BigNumberish, _messageId: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        destinationDomain(overrides?: CallOverrides): Promise<number>;
        dispatcher(overrides?: CallOverrides): Promise<string>;
        ism(overrides?: CallOverrides): Promise<string>;
        postDispatch(_destinationDomain: BigNumberish, _messageId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        destinationDomain(overrides?: CallOverrides): Promise<BigNumber>;
        dispatcher(overrides?: CallOverrides): Promise<BigNumber>;
        ism(overrides?: CallOverrides): Promise<BigNumber>;
        postDispatch(_destinationDomain: BigNumberish, _messageId: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        destinationDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dispatcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ism(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        postDispatch(_destinationDomain: BigNumberish, _messageId: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=ERC5164MessageHook.d.ts.map