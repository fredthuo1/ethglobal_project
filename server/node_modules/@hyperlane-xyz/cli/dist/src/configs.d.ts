import { z } from 'zod';
import { TokenType } from '@hyperlane-xyz/hyperlane-token';
import { ChainMap, HyperlaneContractsMap, MultisigIsmConfig } from '@hyperlane-xyz/sdk';
export declare function readChainConfig(filepath: string): ChainMap<{
    name: string;
    chainId: number;
    protocol: import("@hyperlane-xyz/sdk").ProtocolType;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("@hyperlane-xyz/sdk").ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
}>;
export declare function readChainConfigIfExists(filePath: string): ChainMap<{
    name: string;
    chainId: number;
    protocol: import("@hyperlane-xyz/sdk").ProtocolType;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("@hyperlane-xyz/sdk").ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
}>;
export declare function readDeploymentArtifacts(filePath: string): HyperlaneContractsMap<any>;
export declare function readMultisigConfig(filePath: string): ChainMap<MultisigIsmConfig>;
export declare const WarpRouteConfigSchema: z.ZodObject<{
    base: z.ZodObject<{
        mailbox: z.ZodOptional<z.ZodString>;
        interchainGasPaymaster: z.ZodOptional<z.ZodString>;
        interchainSecurityModule: z.ZodOptional<z.ZodString>;
        foreignDeployment: z.ZodOptional<z.ZodString>;
        type: z.ZodUnion<[z.ZodLiteral<TokenType.native>, z.ZodLiteral<TokenType.collateral>]>;
        chainName: z.ZodString;
        address: z.ZodOptional<z.ZodString>;
        isNft: z.ZodOptional<z.ZodBoolean>;
        name: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        decimals: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: TokenType.collateral | TokenType.native;
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        address?: string | undefined;
        isNft?: boolean | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        decimals?: number | undefined;
    }, {
        type: TokenType.collateral | TokenType.native;
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        address?: string | undefined;
        isNft?: boolean | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        decimals?: number | undefined;
    }>;
    synthetics: z.ZodArray<z.ZodObject<{
        mailbox: z.ZodOptional<z.ZodString>;
        interchainGasPaymaster: z.ZodOptional<z.ZodString>;
        interchainSecurityModule: z.ZodOptional<z.ZodString>;
        foreignDeployment: z.ZodOptional<z.ZodString>;
        chainName: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        symbol: z.ZodOptional<z.ZodString>;
        totalSupply: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }, {
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }>, "atleastone">;
}, "strip", z.ZodTypeAny, {
    base: {
        type: TokenType.collateral | TokenType.native;
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        address?: string | undefined;
        isNft?: boolean | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        decimals?: number | undefined;
    };
    synthetics: [{
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }, ...{
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }[]];
}, {
    base: {
        type: TokenType.collateral | TokenType.native;
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        address?: string | undefined;
        isNft?: boolean | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        decimals?: number | undefined;
    };
    synthetics: [{
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }, ...{
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }[]];
}>;
export type WarpRouteConfig = z.infer<typeof WarpRouteConfigSchema>;
export declare function readWarpRouteConfig(filePath: string): {
    base: {
        type: TokenType.collateral | TokenType.native;
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        address?: string | undefined;
        isNft?: boolean | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        decimals?: number | undefined;
    };
    synthetics: [{
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }, ...{
        chainName: string;
        mailbox?: string | undefined;
        interchainGasPaymaster?: string | undefined;
        interchainSecurityModule?: string | undefined;
        foreignDeployment?: string | undefined;
        name?: string | undefined;
        symbol?: string | undefined;
        totalSupply?: number | undefined;
    }[]];
};
//# sourceMappingURL=configs.d.ts.map