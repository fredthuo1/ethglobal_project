import { MultiProvider, chainMetadata, hyperlaneEnvironments, objMerge, } from '@hyperlane-xyz/sdk';
import { readChainConfigIfExists } from './configs.js';
import { keyToSigner } from './utils/keys.js';
export const sdkContractAddressesMap = {
    ...hyperlaneEnvironments.testnet,
    ...hyperlaneEnvironments.mainnet,
};
export function getMergedContractAddresses(artifacts) {
    return objMerge(sdkContractAddressesMap, artifacts || {});
}
export function getDeployerContext(key, chainConfigPath) {
    const signer = keyToSigner(key);
    const customChains = readChainConfigIfExists(chainConfigPath);
    const multiProvider = getMultiProvider(customChains, signer);
    return { signer, customChains, multiProvider };
}
export function getMultiProvider(customChains, signer) {
    const chainConfigs = { ...chainMetadata, ...customChains };
    const mp = new MultiProvider(chainConfigs);
    if (signer)
        mp.setSharedSigner(signer);
    return mp;
}
//# sourceMappingURL=context.js.map