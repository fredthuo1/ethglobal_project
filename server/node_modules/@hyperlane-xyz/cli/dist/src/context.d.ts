import { ethers } from 'ethers';
import { ChainMap, ChainMetadata, HyperlaneContractsMap, MultiProvider } from '@hyperlane-xyz/sdk';
export declare const sdkContractAddressesMap: {
    celo: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    ethereum: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    avalanche: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    polygon: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    bsc: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    arbitrum: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        timelockController: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    optimism: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    moonbeam: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    gnosis: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        create2Factory: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    alfajores: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    fuji: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    mumbai: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    bsctestnet: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    goerli: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    moonbasealpha: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainAccountIsm: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    optimismgoerli: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    arbitrumgoerli: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
    sepolia: {
        storageGasOracle: string;
        validatorAnnounce: string;
        proxyAdmin: string;
        mailbox: string;
        interchainGasPaymaster: string;
        defaultIsmInterchainGasPaymaster: string;
        multisigIsm: string;
        testRecipient: string;
        interchainAccountIsm: string;
        aggregationIsmFactory: string;
        routingIsmFactory: string;
        interchainQueryRouter: string;
        interchainAccountRouter: string;
        merkleRootMultisigIsmFactory: string;
        messageIdMultisigIsmFactory: string;
    };
};
export declare function getMergedContractAddresses(artifacts?: HyperlaneContractsMap<any>): HyperlaneContractsMap<any>;
export declare function getDeployerContext(key: string, chainConfigPath: string): {
    signer: ethers.Wallet;
    customChains: ChainMap<{
        name: string;
        chainId: number;
        protocol: import("@hyperlane-xyz/sdk").ProtocolType;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("@hyperlane-xyz/sdk").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
    }>;
    multiProvider: MultiProvider;
};
export declare function getMultiProvider(customChains: ChainMap<ChainMetadata>, signer?: ethers.Signer): MultiProvider;
//# sourceMappingURL=context.d.ts.map