import { runCoreDeploy } from '../deploy/core.js';
import { runWarpDeploy } from '../deploy/warp.js';
import { logGray } from '../logger.js';
import { chainsCommandOption, coreArtifactsOption, keyCommandOption, outDirCommandOption, } from './options.js';
/**
 * Parent command
 */
export const deployCommand = {
    command: 'deploy',
    describe: 'Permisionslessly deploy a Hyperlane contracts or extensions',
    builder: (yargs) => yargs
        .command(coreCommand)
        .command(warpCommand)
        .version(false)
        .demandCommand(),
    handler: () => console.log('Command required'),
};
/**
 * Core command
 */
const coreCommand = {
    command: 'core',
    describe: 'Deploy core Hyperlane contracts',
    builder: (yargs) => yargs.options({
        key: keyCommandOption,
        chains: chainsCommandOption,
        out: outDirCommandOption,
    }),
    handler: async (argv) => {
        logGray('Hyperlane permissionless core deployment');
        logGray('----------------------------------------');
        const key = argv.key || process.env.HYP_KEY;
        const chainConfigPath = argv.chains;
        const outPath = argv.out;
        await runCoreDeploy({ key, chainConfigPath, outPath });
        process.exit(0);
    },
};
/**
 * Warp command
 */
const warpCommand = {
    command: 'warp',
    describe: 'Deploy Warp Route contracts',
    builder: (yargs) => yargs.options({
        key: keyCommandOption,
        chains: chainsCommandOption,
        out: outDirCommandOption,
        core: coreArtifactsOption,
        config: {
            type: 'string',
            description: 'A path to a JSON or YAML file with a warp config.',
            default: './configs/warp-tokens.yaml',
        },
    }),
    handler: async (argv) => {
        const key = argv.key || process.env.HYP_KEY;
        const chainConfigPath = argv.chains;
        const warpConfigPath = argv.config;
        const coreArtifactsPath = argv.core;
        const outPath = argv.out;
        await runWarpDeploy({
            key,
            chainConfigPath,
            warpConfigPath,
            coreArtifactsPath,
            outPath,
        });
        process.exit(0);
    },
};
//# sourceMappingURL=deploy.js.map