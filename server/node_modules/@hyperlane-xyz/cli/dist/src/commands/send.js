import { log } from '../logger.js';
import { sendTestMessage } from '../send/message.js';
import { sendTestTransfer } from '../send/transfer.js';
import { chainsCommandOption, coreArtifactsOption, keyCommandOption, } from './options.js';
/**
 * Parent command
 */
export const sendCommand = {
    command: 'send',
    describe: 'Send a test message or transfer',
    builder: (yargs) => yargs
        .command(messageCommand)
        .command(transferCommand)
        .version(false)
        .demandCommand(),
    handler: () => log('Command required'),
};
/**
 * Message command
 */
const messageOptions = {
    key: keyCommandOption,
    chains: chainsCommandOption,
    core: coreArtifactsOption,
    origin: {
        type: 'string',
        description: 'Origin chain to send message from',
        demandOption: true,
    },
    destination: {
        type: 'string',
        description: 'Destination chain to send message to',
        demandOption: true,
    },
    timeout: {
        type: 'number',
        description: 'Timeout in seconds',
        default: 5 * 60,
    },
};
const messageCommand = {
    command: 'message',
    describe: 'Send a test message to a remote chain',
    builder: (yargs) => yargs.options(messageOptions),
    handler: async (argv) => {
        const key = argv.key || process.env.HYP_KEY;
        const chainConfigPath = argv.chains;
        const coreArtifactsPath = argv.core;
        const origin = argv.origin;
        const destination = argv.destination;
        const timeout = argv.timeout;
        await sendTestMessage({
            key,
            chainConfigPath,
            coreArtifactsPath,
            origin,
            destination,
            timeout,
        });
        process.exit(0);
    },
};
/**
 * Transfer command
 */
const transferCommand = {
    command: 'transfer',
    describe: 'Send a test token transfer on a warp route',
    builder: (yargs) => yargs.options({
        ...messageOptions,
        router: {
            type: 'string',
            description: 'The address of the token router contract',
            demandOption: true,
        },
        wei: {
            type: 'string',
            description: 'Amount in wei to send',
            default: 1,
        },
        recipient: {
            type: 'string',
            description: 'Token recipient address (defaults to sender)',
        },
    }),
    handler: async (argv) => {
        const key = argv.key || process.env.HYP_KEY;
        const chainConfigPath = argv.chains;
        const coreArtifactsPath = argv.core;
        const origin = argv.origin;
        const destination = argv.destination;
        const timeout = argv.timeout;
        const routerAddress = argv.router;
        const wei = argv.wei;
        const recipient = argv.recipient;
        await sendTestTransfer({
            key,
            chainConfigPath,
            coreArtifactsPath,
            origin,
            destination,
            routerAddress,
            wei,
            recipient,
            timeout,
        });
        process.exit(0);
    },
};
//# sourceMappingURL=send.js.map