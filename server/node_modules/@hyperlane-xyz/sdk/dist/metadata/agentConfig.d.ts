import { z } from 'zod';
import { MultiProvider } from '../providers/MultiProvider';
import { ChainMap, ChainName } from '../types';
import { ProtocolType } from './chainMetadataTypes';
import { HyperlaneDeploymentArtifacts } from './deploymentArtifacts';
/**
 * New agent config shape that extends the existing chain metadata with agent-specific fields.
 */
export declare enum AgentConnectionType {
    Http = "http",
    Ws = "ws",
    HttpQuorum = "httpQuorum",
    HttpFallback = "httpFallback"
}
export declare const AgentMetadataExtSchema: z.ZodObject<{
    rpcConsensusType: z.ZodDefault<z.ZodNativeEnum<typeof AgentConnectionType>>;
    overrideRpcUrls: z.ZodOptional<z.ZodString>;
    index: z.ZodObject<{
        from: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        chunk: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        from?: number | undefined;
        chunk?: number | undefined;
    }, {
        from?: number | undefined;
        chunk?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    index: {
        from?: number | undefined;
        chunk?: number | undefined;
    };
    rpcConsensusType: AgentConnectionType;
    overrideRpcUrls?: string | undefined;
}, {
    index: {
        from?: number | undefined;
        chunk?: number | undefined;
    };
    rpcConsensusType?: AgentConnectionType | undefined;
    overrideRpcUrls?: string | undefined;
}>;
export type AgentMetadataExtension = z.infer<typeof AgentMetadataExtSchema>;
export declare const ChainMetadataForAgentSchema: z.ZodObject<{
    name: z.ZodString;
    chainId: z.ZodNumber;
    protocol: z.ZodNativeEnum<typeof ProtocolType>;
    interchainSecurityModule: z.ZodOptional<z.ZodString>;
    interchainGasPaymaster: z.ZodString;
    mailbox: z.ZodString;
    domainId: z.ZodOptional<z.ZodNumber>;
    displayName: z.ZodOptional<z.ZodString>;
    displayNameShort: z.ZodOptional<z.ZodString>;
    logoURI: z.ZodOptional<z.ZodString>;
    nativeToken: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        symbol: z.ZodString;
        decimals: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        symbol: string;
        name: string;
        decimals: number;
    }, {
        symbol: string;
        name: string;
        decimals: number;
    }>>;
    rpcUrls: z.ZodArray<z.ZodObject<{
        http: z.ZodString;
        webSocket: z.ZodOptional<z.ZodString>;
        pagination: z.ZodOptional<z.ZodObject<{
            maxBlockRange: z.ZodOptional<z.ZodNumber>;
            minBlockNumber: z.ZodOptional<z.ZodNumber>;
            maxBlockAge: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxRequests: z.ZodNumber;
            baseRetryMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxRequests: number;
            baseRetryMs: number;
        }, {
            maxRequests: number;
            baseRetryMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }>, "atleastone">;
    blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        url: z.ZodString;
        apiUrl: z.ZodString;
        apiKey: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodNativeEnum<typeof import("./chainMetadataTypes").ExplorerFamily>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }>, "many">>;
    blocks: z.ZodOptional<z.ZodObject<{
        confirmations: z.ZodNumber;
        reorgPeriod: z.ZodOptional<z.ZodNumber>;
        estimateBlockTime: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }>>;
    transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
    gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
    isTestnet: z.ZodOptional<z.ZodBoolean>;
    validatorAnnounce: z.ZodString;
    rpcConsensusType: z.ZodDefault<z.ZodNativeEnum<typeof AgentConnectionType>>;
    overrideRpcUrls: z.ZodOptional<z.ZodString>;
    index: z.ZodObject<{
        from: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        chunk: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        from?: number | undefined;
        chunk?: number | undefined;
    }, {
        from?: number | undefined;
        chunk?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    index: {
        from?: number | undefined;
        chunk?: number | undefined;
    };
    name: string;
    chainId: number;
    protocol: ProtocolType;
    interchainGasPaymaster: string;
    mailbox: string;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    validatorAnnounce: string;
    rpcConsensusType: AgentConnectionType;
    interchainSecurityModule?: string | undefined;
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
    overrideRpcUrls?: string | undefined;
}, {
    index: {
        from?: number | undefined;
        chunk?: number | undefined;
    };
    name: string;
    chainId: number;
    protocol: ProtocolType;
    interchainGasPaymaster: string;
    mailbox: string;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    validatorAnnounce: string;
    interchainSecurityModule?: string | undefined;
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
    rpcConsensusType?: AgentConnectionType | undefined;
    overrideRpcUrls?: string | undefined;
}>;
export type ChainMetadataForAgent = z.infer<typeof ChainMetadataForAgentSchema>;
/**
 * Deprecated agent config shapes.
 * See https://github.com/hyperlane-xyz/hyperlane-monorepo/issues/2215
 */
export interface AgentSigner {
    key: string;
    type: string;
}
export type AgentConnection = {
    type: AgentConnectionType.Http;
    url: string;
} | {
    type: AgentConnectionType.Ws;
    url: string;
} | {
    type: AgentConnectionType.HttpQuorum;
    urls: string;
} | {
    type: AgentConnectionType.HttpFallback;
    urls: string;
};
export interface AgentChainSetupBase {
    name: ChainName;
    domain: number;
    signer?: AgentSigner;
    finalityBlocks: number;
    addresses: HyperlaneDeploymentArtifacts;
    protocol: ProtocolType;
    connection?: AgentConnection;
    index?: {
        from: number;
    };
}
export interface AgentChainSetup extends AgentChainSetupBase {
    signer: AgentSigner;
    connection: AgentConnection;
}
export interface AgentConfig {
    chains: Partial<ChainMap<AgentChainSetupBase>>;
    tracing?: {
        level?: string;
        fmt?: 'json';
    };
}
/**
 * Utilities for generating agent configs from metadata / artifacts.
 */
export declare function buildAgentConfigNew(chains: ChainName[], multiProvider: MultiProvider, addresses: ChainMap<HyperlaneDeploymentArtifacts>, startBlocks: ChainMap<number>): ChainMap<ChainMetadataForAgent>;
export declare function buildAgentConfigDeprecated(chains: ChainName[], multiProvider: MultiProvider, addresses: ChainMap<HyperlaneDeploymentArtifacts>, startBlocks: ChainMap<number>): AgentConfig;
export type CombinedAgentConfig = ChainMap<ChainMetadataForAgent> | AgentConfig;
export declare function buildAgentConfig(chains: ChainName[], multiProvider: MultiProvider, addresses: ChainMap<HyperlaneDeploymentArtifacts>, startBlocks: ChainMap<number>): CombinedAgentConfig;
//# sourceMappingURL=agentConfig.d.ts.map