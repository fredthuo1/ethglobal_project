import { z } from 'zod';
export declare enum ProtocolType {
    Ethereum = "ethereum",
    Sealevel = "sealevel",
    Fuel = "fuel"
}
export type ProtocolTypeValue = `${ProtocolType}`;
export declare const ProtocolSmallestUnit: {
    ethereum: string;
    sealevel: string;
};
export declare enum ExplorerFamily {
    Etherscan = "etherscan",
    Blockscout = "blockscout",
    Other = "other"
}
export type ExplorerFamilyValue = `${ExplorerFamily}`;
/**
 * A collection of useful properties and settings for chains using Hyperlane
 * Specified as a Zod schema
 */
export declare const ChainMetadataSchema: z.ZodObject<{
    protocol: z.ZodNativeEnum<typeof ProtocolType>;
    chainId: z.ZodNumber;
    domainId: z.ZodOptional<z.ZodNumber>;
    name: z.ZodString;
    displayName: z.ZodOptional<z.ZodString>;
    displayNameShort: z.ZodOptional<z.ZodString>;
    logoURI: z.ZodOptional<z.ZodString>;
    nativeToken: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        symbol: z.ZodString;
        decimals: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        symbol: string;
        name: string;
        decimals: number;
    }, {
        symbol: string;
        name: string;
        decimals: number;
    }>>;
    rpcUrls: z.ZodArray<z.ZodObject<{
        http: z.ZodString;
        webSocket: z.ZodOptional<z.ZodString>;
        pagination: z.ZodOptional<z.ZodObject<{
            maxBlockRange: z.ZodOptional<z.ZodNumber>;
            minBlockNumber: z.ZodOptional<z.ZodNumber>;
            maxBlockAge: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxRequests: z.ZodNumber;
            baseRetryMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxRequests: number;
            baseRetryMs: number;
        }, {
            maxRequests: number;
            baseRetryMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }>, "atleastone">;
    blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        url: z.ZodString;
        apiUrl: z.ZodString;
        apiKey: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodNativeEnum<typeof ExplorerFamily>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }>, "many">>;
    blocks: z.ZodOptional<z.ZodObject<{
        confirmations: z.ZodNumber;
        reorgPeriod: z.ZodOptional<z.ZodNumber>;
        estimateBlockTime: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }>>;
    transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
    gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
    isTestnet: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    chainId: number;
    protocol: ProtocolType;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
}, {
    name: string;
    chainId: number;
    protocol: ProtocolType;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
}>;
export type ChainMetadata = z.infer<typeof ChainMetadataSchema>;
export declare function isValidChainMetadata(c: ChainMetadata): boolean;
export declare function getDomainId(chainMetadata: ChainMetadata): number;
//# sourceMappingURL=chainMetadataTypes.d.ts.map