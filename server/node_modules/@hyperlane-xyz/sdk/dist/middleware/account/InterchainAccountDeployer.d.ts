import { HyperlaneContracts } from '../../contracts';
import { MultiProvider } from '../../providers/MultiProvider';
import { ProxiedRouterDeployer } from '../../router/ProxiedRouterDeployer';
import { ProxiedRouterConfig, RouterConfig } from '../../router/types';
import { ChainName } from '../../types';
import { InterchainAccountFactories } from './contracts';
export type InterchainAccountConfig = ProxiedRouterConfig;
export declare class InterchainAccountDeployer extends ProxiedRouterDeployer<InterchainAccountConfig, InterchainAccountFactories, 'interchainAccountRouter'> {
    readonly routerContractName = "interchainAccountRouter";
    constructor(multiProvider: MultiProvider);
    constructorArgs(chain: string, __: RouterConfig): Promise<[number]>;
    initializeArgs(chain: string, config: RouterConfig): Promise<[
        _mailbox: string,
        _interchainGasPaymaster: string,
        _interchainSecurityModule: string,
        _owner: string
    ]>;
    deployContracts(chain: ChainName, config: InterchainAccountConfig): Promise<HyperlaneContracts<InterchainAccountFactories>>;
}
//# sourceMappingURL=InterchainAccountDeployer.d.ts.map