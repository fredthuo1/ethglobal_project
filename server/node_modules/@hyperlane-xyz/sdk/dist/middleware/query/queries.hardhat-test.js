"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const core_1 = require("@hyperlane-xyz/core");
const utils_1 = require("@hyperlane-xyz/utils");
const chainMetadata_1 = require("../../consts/chainMetadata");
const chains_1 = require("../../consts/chains");
const TestCoreApp_1 = require("../../core/TestCoreApp");
const TestCoreDeployer_1 = require("../../core/TestCoreDeployer");
const MultiProvider_1 = require("../../providers/MultiProvider");
const testUtils_1 = require("../../test/testUtils");
const InterchainQuery_1 = require("./InterchainQuery");
const InterchainQueryChecker_1 = require("./InterchainQueryChecker");
const InterchainQueryDeployer_1 = require("./InterchainQueryDeployer");
describe('InterchainQueryRouter', async () => {
    const localChain = chains_1.Chains.test1;
    const remoteChain = chains_1.Chains.test2;
    const localDomain = chainMetadata_1.chainMetadata[localChain].chainId;
    const remoteDomain = chainMetadata_1.chainMetadata[remoteChain].chainId;
    let contracts;
    let signer;
    let local;
    let remote;
    let multiProvider;
    let coreApp;
    let config;
    let testQuery;
    before(async () => {
        [signer] = await hardhat_1.ethers.getSigners();
        multiProvider = MultiProvider_1.MultiProvider.createTestMultiProvider({ signer });
        const coreDeployer = new TestCoreDeployer_1.TestCoreDeployer(multiProvider);
        const coreContractsMaps = await coreDeployer.deploy();
        coreApp = new TestCoreApp_1.TestCoreApp(coreContractsMaps, multiProvider);
        config = await (0, testUtils_1.deployTestIgpsAndGetRouterConfig)(multiProvider, signer.address, coreContractsMaps);
    });
    beforeEach(async () => {
        const InterchainQuery = new InterchainQueryDeployer_1.InterchainQueryDeployer(multiProvider);
        contracts = await InterchainQuery.deploy(config);
        local = contracts[localChain].interchainQueryRouter;
        remote = contracts[remoteChain].interchainQueryRouter;
        testQuery = await new core_1.TestQuery__factory(signer).deploy(local.address);
    });
    it('checks', async () => {
        const app = new InterchainQuery_1.InterchainQuery(contracts, multiProvider);
        const checker = new InterchainQueryChecker_1.InterchainQueryChecker(multiProvider, app, config);
        await checker.check();
        (0, chai_1.expect)(checker.violations.length).to.eql(0);
    });
    it('completes query round trip and invokes callback', async () => {
        const secret = 123;
        const sender = testQuery.address;
        const bytes32sender = utils_1.utils.addressToBytes32(sender);
        const expectedOwner = await remote.owner();
        await (0, chai_1.expect)(testQuery.queryRouterOwner(remoteDomain, secret))
            .to.emit(local, 'QueryDispatched')
            .withArgs(remoteDomain, sender);
        const result = await coreApp.processOutboundMessages(localChain);
        const response = result.get(remoteChain)[0];
        await (0, chai_1.expect)(response)
            .to.emit(remote, 'QueryExecuted')
            .withArgs(localDomain, bytes32sender);
        const result2 = await coreApp.processOutboundMessages(remoteChain);
        const response2 = result2.get(localChain)[0];
        await (0, chai_1.expect)(response2)
            .to.emit(local, 'QueryResolved')
            .withArgs(remoteDomain, sender);
        await (0, chai_1.expect)(response2)
            .to.emit(testQuery, 'Owner')
            .withArgs(secret, expectedOwner);
    });
});
//# sourceMappingURL=queries.hardhat-test.js.map