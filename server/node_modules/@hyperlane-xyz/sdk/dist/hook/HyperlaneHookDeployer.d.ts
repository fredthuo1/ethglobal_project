import { OptimismISM, OptimismMessageHook, TestRecipient } from '@hyperlane-xyz/core';
import { types } from '@hyperlane-xyz/utils';
import { HyperlaneContracts, HyperlaneContractsMap } from '../contracts';
import { HyperlaneDeployer } from '../deploy/HyperlaneDeployer';
import { MultiProvider } from '../providers/MultiProvider';
import { ChainMap, ChainName } from '../types';
import { HookFactories } from './contracts';
import { HookConfig } from './types';
export declare class HyperlaneHookDeployer extends HyperlaneDeployer<HookConfig, HookFactories> {
    constructor(multiProvider: MultiProvider);
    deploy(configMap: ChainMap<HookConfig>): Promise<HyperlaneContractsMap<HookFactories>>;
    deployContracts(chain: ChainName, hookConfig: HookConfig): Promise<HyperlaneContracts<HookFactories>>;
    deployOptimismISM(chain: ChainName, nativeBridge: types.Address): Promise<OptimismISM>;
    deployTestRecipient(chain: ChainName, ism: types.Address): Promise<TestRecipient>;
    deployOptimismMessageHook(chain: ChainName, destinationDomain: number, nativeBridge: types.Address, optimismISM: types.Address): Promise<OptimismMessageHook>;
}
//# sourceMappingURL=HyperlaneHookDeployer.d.ts.map