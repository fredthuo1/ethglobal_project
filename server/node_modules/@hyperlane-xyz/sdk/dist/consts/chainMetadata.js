"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testnetChainsMetadata = exports.mainnetChainsMetadata = exports.chainIdToMetadata = exports.chainMetadata = exports.zbctestnet = exports.solanadevnet = exports.solanatestnet = exports.solana = exports.test3 = exports.test2 = exports.test1 = exports.gnosis = exports.polygon = exports.optimismgoerli = exports.optimism = exports.mumbai = exports.moonbeam = exports.moonbasealpha = exports.sepolia = exports.goerli = exports.fuji = exports.ethereum = exports.celo = exports.bsctestnet = exports.bsc = exports.avalanche = exports.arbitrumgoerli = exports.arbitrum = exports.alfajores = exports.solToken = exports.xDaiToken = exports.maticToken = exports.etherToken = exports.celoToken = exports.bnbToken = exports.avaxToken = void 0;
const chainMetadataTypes_1 = require("../metadata/chainMetadataTypes");
const chains_1 = require("./chains");
/**
 * Common native currencies
 */
exports.avaxToken = { decimals: 18, name: 'Avalanche', symbol: 'AVAX' };
exports.bnbToken = { decimals: 18, name: 'BNB', symbol: 'BNB' };
exports.celoToken = { decimals: 18, name: 'CELO', symbol: 'CELO' };
exports.etherToken = { name: 'Ether', symbol: 'ETH', decimals: 18 };
exports.maticToken = { name: 'MATIC', symbol: 'MATIC', decimals: 18 };
exports.xDaiToken = { name: 'xDai', symbol: 'xDai', decimals: 18 };
exports.solToken = { name: 'Sol', symbol: 'SOL', decimals: 9 };
/**
 * Metadata for Ethereum chains
 */
exports.alfajores = {
    chainId: 44787,
    domainId: 44787,
    name: chains_1.Chains.alfajores,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Alfajores',
    nativeToken: exports.celoToken,
    rpcUrls: [{ http: 'https://alfajores-forno.celo-testnet.org' }],
    blockExplorers: [
        {
            name: 'CeloScan',
            url: 'https://alfajores.celoscan.io',
            apiUrl: 'https://api-alfajores.celoscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
        {
            name: 'Blockscout',
            url: 'https://explorer.celo.org/alfajores',
            apiUrl: 'https://explorer.celo.org/alfajores/api',
            family: chainMetadataTypes_1.ExplorerFamily.Blockscout,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 5,
    },
    isTestnet: true,
};
exports.arbitrum = {
    chainId: 42161,
    domainId: 42161,
    name: chains_1.Chains.arbitrum,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Arbitrum',
    nativeToken: exports.etherToken,
    rpcUrls: [{ http: 'https://arb1.arbitrum.io/rpc' }],
    blockExplorers: [
        {
            name: 'Arbiscan',
            url: 'https://arbiscan.io',
            apiUrl: 'https://api.arbiscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 3,
    },
    gasCurrencyCoinGeckoId: 'ethereum',
    gnosisSafeTransactionServiceUrl: 'https://safe-transaction-arbitrum.safe.global/',
};
exports.arbitrumgoerli = {
    chainId: 421613,
    domainId: 421613,
    name: chains_1.Chains.arbitrumgoerli,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Arbitrum Goerli',
    displayNameShort: 'Arb. Goerli',
    nativeToken: exports.etherToken,
    rpcUrls: [{ http: 'https://goerli-rollup.arbitrum.io/rpc' }],
    blockExplorers: [
        {
            name: 'Arbiscan',
            url: 'https://goerli.arbiscan.io',
            apiUrl: 'https://api-goerli.arbiscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 1,
        estimateBlockTime: 3,
    },
    isTestnet: true,
};
exports.avalanche = {
    chainId: 43114,
    domainId: 43114,
    name: chains_1.Chains.avalanche,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Avalanche',
    nativeToken: exports.avaxToken,
    rpcUrls: [
        {
            http: 'https://api.avax.network/ext/bc/C/rpc',
            pagination: {
                maxBlockRange: 100000,
                minBlockNumber: 6765067,
            },
        },
    ],
    blockExplorers: [
        {
            name: 'SnowTrace',
            url: 'https://snowtrace.io',
            apiUrl: 'https://api.snowtrace.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Other,
        },
    ],
    blocks: {
        confirmations: 3,
        reorgPeriod: 3,
        estimateBlockTime: 2,
    },
    gasCurrencyCoinGeckoId: 'avalanche-2',
    gnosisSafeTransactionServiceUrl: 'https://safe-transaction-avalanche.safe.global/',
};
exports.bsc = {
    chainId: 56,
    domainId: 56,
    name: chains_1.Chains.bsc,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Binance Smart Chain',
    displayNameShort: 'Binance',
    nativeToken: exports.bnbToken,
    rpcUrls: [
        { http: 'https://bsc-dataseed.binance.org' },
        { http: 'https://rpc.ankr.com/bsc' },
    ],
    blockExplorers: [
        {
            name: 'BscScan',
            url: 'https://bscscan.com',
            apiUrl: 'https://api.bscscan.com/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 15,
        estimateBlockTime: 3,
    },
    gasCurrencyCoinGeckoId: 'binancecoin',
    gnosisSafeTransactionServiceUrl: 'https://safe-transaction-bsc.safe.global/',
};
exports.bsctestnet = {
    chainId: 97,
    domainId: 97,
    name: chains_1.Chains.bsctestnet,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'BSC Testnet',
    nativeToken: exports.bnbToken,
    rpcUrls: [{ http: 'https://data-seed-prebsc-1-s3.binance.org:8545' }],
    blockExplorers: [
        {
            name: 'BscScan',
            url: 'https://testnet.bscscan.com',
            apiUrl: 'https://api-testnet.bscscan.com/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 9,
        estimateBlockTime: 3,
    },
    isTestnet: true,
};
exports.celo = {
    chainId: 42220,
    domainId: 42220,
    name: chains_1.Chains.celo,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Celo',
    nativeToken: exports.celoToken,
    rpcUrls: [{ http: 'https://forno.celo.org' }],
    blockExplorers: [
        {
            name: 'CeloScan',
            url: 'https://celoscan.io',
            apiUrl: 'https://api.celoscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
        {
            name: 'Blockscout',
            url: 'https://explorer.celo.org',
            apiUrl: 'https://explorer.celo.org/mainnet/api',
            family: chainMetadataTypes_1.ExplorerFamily.Blockscout,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 5,
    },
    gnosisSafeTransactionServiceUrl: 'https://transaction-service.gnosis-safe-staging.celo-networks-dev.org',
};
exports.ethereum = {
    chainId: 1,
    domainId: 1,
    name: chains_1.Chains.ethereum,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Ethereum',
    nativeToken: exports.etherToken,
    rpcUrls: [
        { http: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161' },
        { http: 'https://cloudflare-eth.com' },
    ],
    blockExplorers: [
        {
            name: 'Etherscan',
            url: 'https://etherscan.io',
            apiUrl: 'https://api.etherscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
        {
            name: 'Blockscout',
            url: 'https://blockscout.com/eth/mainnet',
            apiUrl: 'https://blockscout.com/eth/mainnet/api',
            family: chainMetadataTypes_1.ExplorerFamily.Blockscout,
        },
    ],
    blocks: {
        confirmations: 7,
        reorgPeriod: 14,
        estimateBlockTime: 13,
    },
    gnosisSafeTransactionServiceUrl: 'https://safe-transaction-mainnet.safe.global/',
};
exports.fuji = {
    chainId: 43113,
    domainId: 43113,
    name: chains_1.Chains.fuji,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Fuji',
    nativeToken: exports.avaxToken,
    rpcUrls: [
        {
            http: 'https://api.avax-test.network/ext/bc/C/rpc',
            pagination: { maxBlockRange: 2048 },
        },
    ],
    blockExplorers: [
        {
            name: 'SnowTrace',
            url: 'https://testnet.snowtrace.io',
            apiUrl: 'https://api-testnet.snowtrace.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 3,
        reorgPeriod: 3,
        estimateBlockTime: 2,
    },
    isTestnet: true,
};
exports.goerli = {
    chainId: 5,
    domainId: 5,
    name: chains_1.Chains.goerli,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Goerli',
    nativeToken: exports.etherToken,
    rpcUrls: [
        { http: 'https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161' },
        { http: 'https://rpc.ankr.com/eth_goerli' },
        { http: 'https://eth-goerli.public.blastapi.io' },
    ],
    blockExplorers: [
        {
            name: 'Etherscan',
            url: 'https://goerli.etherscan.io',
            apiUrl: 'https://api-goerli.etherscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 2,
        estimateBlockTime: 13,
    },
    isTestnet: true,
};
exports.sepolia = {
    chainId: 11155111,
    domainId: 11155111,
    name: chains_1.Chains.sepolia,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Sepolia',
    nativeToken: exports.etherToken,
    rpcUrls: [
        { http: 'https://endpoints.omniatech.io/v1/eth/sepolia/public' },
        { http: 'https://rpc.sepolia.org' },
    ],
    blockExplorers: [
        {
            name: 'Etherscan',
            url: 'https://sepolia.etherscan.io',
            apiUrl: 'https://api-sepolia.etherscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 2,
        estimateBlockTime: 13,
    },
    isTestnet: true,
};
exports.moonbasealpha = {
    chainId: 1287,
    domainId: 1287,
    name: chains_1.Chains.moonbasealpha,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Moonbase Alpha',
    displayNameShort: 'Moonbase',
    nativeToken: {
        decimals: 18,
        name: 'DEV',
        symbol: 'DEV',
    },
    rpcUrls: [{ http: 'https://rpc.api.moonbase.moonbeam.network' }],
    blockExplorers: [
        {
            name: 'MoonScan',
            url: 'https://moonbase.moonscan.io',
            apiUrl: 'https://api-moonbase.moonscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 1,
        estimateBlockTime: 12,
    },
    isTestnet: true,
};
exports.moonbeam = {
    chainId: 1284,
    domainId: 1284,
    name: chains_1.Chains.moonbeam,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Moonbeam',
    nativeToken: {
        decimals: 18,
        name: 'GLMR',
        symbol: 'GLMR',
    },
    rpcUrls: [{ http: 'https://rpc.api.moonbeam.network' }],
    blockExplorers: [
        {
            name: 'MoonScan',
            url: 'https://moonscan.io',
            apiUrl: 'https://api-moonbeam.moonscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 2,
        reorgPeriod: 2,
        estimateBlockTime: 12,
    },
    gnosisSafeTransactionServiceUrl: 'https://transaction.multisig.moonbeam.network',
};
exports.mumbai = {
    chainId: 80001,
    domainId: 80001,
    name: chains_1.Chains.mumbai,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Mumbai',
    nativeToken: exports.maticToken,
    rpcUrls: [
        {
            http: 'https://rpc.ankr.com/polygon_mumbai',
            pagination: {
                // eth_getLogs and eth_newFilter are limited to a 10,000 blocks range
                maxBlockRange: 10000,
                minBlockNumber: 22900000,
            },
        },
        {
            http: 'https://matic-mumbai.chainstacklabs.com',
        },
    ],
    blockExplorers: [
        {
            name: 'PolygonScan',
            url: 'https://mumbai.polygonscan.com',
            apiUrl: 'https://api-testnet.polygonscan.com/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 3,
        reorgPeriod: 32,
        estimateBlockTime: 5,
    },
    isTestnet: true,
};
exports.optimism = {
    chainId: 10,
    domainId: 10,
    name: chains_1.Chains.optimism,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Optimism',
    nativeToken: exports.etherToken,
    rpcUrls: [{ http: 'https://mainnet.optimism.io' }],
    blockExplorers: [
        {
            name: 'Etherscan',
            url: 'https://optimistic.etherscan.io',
            apiUrl: 'https://api-optimistic.etherscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 3,
    },
    gasCurrencyCoinGeckoId: 'ethereum',
    gnosisSafeTransactionServiceUrl: 'https://safe-transaction-optimism.safe.global/',
};
exports.optimismgoerli = {
    chainId: 420,
    domainId: 420,
    name: chains_1.Chains.optimismgoerli,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Optimism Goerli',
    displayNameShort: 'Opt. Goerli',
    nativeToken: exports.etherToken,
    rpcUrls: [{ http: 'https://goerli.optimism.io' }],
    blockExplorers: [
        {
            name: 'Etherscan',
            url: 'https://goerli-optimism.etherscan.io',
            apiUrl: 'https://api-goerli-optimism.etherscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 1,
        estimateBlockTime: 3,
    },
    isTestnet: true,
};
exports.polygon = {
    chainId: 137,
    domainId: 137,
    name: chains_1.Chains.polygon,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Polygon',
    nativeToken: exports.etherToken,
    rpcUrls: [
        {
            http: 'https://rpc-mainnet.matic.quiknode.pro',
            pagination: {
                // Needs to be low to avoid RPC timeouts
                maxBlockRange: 10000,
                minBlockNumber: 19657100,
            },
        },
        { http: 'https://polygon-rpc.com' },
    ],
    blockExplorers: [
        {
            name: 'PolygonScan',
            url: 'https://polygonscan.com',
            apiUrl: 'https://api.polygonscan.com/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 200,
        reorgPeriod: 256,
        estimateBlockTime: 2,
    },
    gasCurrencyCoinGeckoId: 'matic-network',
    gnosisSafeTransactionServiceUrl: 'https://safe-transaction-polygon.safe.global/',
};
exports.gnosis = {
    chainId: 100,
    domainId: 100,
    name: chains_1.Chains.gnosis,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Gnosis',
    nativeToken: exports.xDaiToken,
    rpcUrls: [
        {
            http: 'https://rpc.gnosischain.com',
            pagination: {
                maxBlockRange: 10000,
                minBlockNumber: 25997478,
            },
        },
    ],
    blockExplorers: [
        {
            name: 'GnosisScan',
            url: 'https://gnosisscan.io',
            apiUrl: 'https://api.gnosisscan.io/api',
            family: chainMetadataTypes_1.ExplorerFamily.Etherscan,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 14,
        estimateBlockTime: 5,
    },
    gasCurrencyCoinGeckoId: 'xdai',
    gnosisSafeTransactionServiceUrl: 'https://safe-transaction-gnosis-chain.safe.global/',
};
/**
 * Metadata for local test chains
 */
exports.test1 = {
    chainId: 13371,
    domainId: 13371,
    name: chains_1.Chains.test1,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Test 1',
    nativeToken: exports.etherToken,
    rpcUrls: [{ http: 'http://127.0.0.1:8545' }],
    blockExplorers: [],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 3,
    },
    isTestnet: true,
};
exports.test2 = {
    chainId: 13372,
    domainId: 13372,
    name: chains_1.Chains.test2,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Test 2',
    nativeToken: exports.etherToken,
    rpcUrls: [{ http: 'http://127.0.0.1:8545' }],
    blockExplorers: [],
    blocks: {
        confirmations: 1,
        reorgPeriod: 1,
        estimateBlockTime: 3,
    },
    isTestnet: true,
};
exports.test3 = {
    chainId: 13373,
    domainId: 13373,
    name: chains_1.Chains.test3,
    protocol: chainMetadataTypes_1.ProtocolType.Ethereum,
    displayName: 'Test 3',
    nativeToken: exports.etherToken,
    rpcUrls: [{ http: 'http://127.0.0.1:8545' }],
    blockExplorers: [],
    blocks: {
        confirmations: 1,
        reorgPeriod: 2,
        estimateBlockTime: 3,
    },
    isTestnet: true,
};
/**
 * Metadata for Sealevel chains
 */
exports.solana = {
    protocol: chainMetadataTypes_1.ProtocolType.Sealevel,
    // Uses the same ChainId as https://www.alchemy.com/chain-connect/chain/solana
    chainId: 1399811149,
    domainId: 1399811149,
    name: 'solana',
    displayName: 'Solana',
    nativeToken: exports.solToken,
    rpcUrls: [{ http: 'https://api.mainnet-beta.solana.com' }],
    blockExplorers: [
        {
            name: 'SolScan',
            url: 'https://solscan.io',
            apiUrl: 'https://public-api.solscan.io',
            family: chainMetadataTypes_1.ExplorerFamily.Other,
        },
    ],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 0.4,
    },
};
exports.solanatestnet = {
    protocol: chainMetadataTypes_1.ProtocolType.Sealevel,
    chainId: 1399811150,
    domainId: 1399811150,
    name: 'solanatestnet',
    displayName: 'Solana Testnet',
    displayNameShort: 'Sol Testnet',
    nativeToken: exports.solToken,
    rpcUrls: [{ http: 'https://api.testnet.solana.com' }],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 0.4,
    },
    isTestnet: true,
};
exports.solanadevnet = {
    protocol: chainMetadataTypes_1.ProtocolType.Sealevel,
    chainId: 1399811151,
    domainId: 1399811151,
    name: 'solanadevnet',
    displayName: 'Solana Devnet',
    displayNameShort: 'Sol Devnet',
    nativeToken: exports.solToken,
    rpcUrls: [{ http: 'https://api.devnet.solana.com' }],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 0.4,
    },
    isTestnet: true,
};
exports.zbctestnet = {
    chainId: 2053254516,
    domainId: 2053254516,
    name: chains_1.Chains.zbctestnet,
    protocol: chainMetadataTypes_1.ProtocolType.Sealevel,
    displayName: 'Zebec Devnet',
    displayNameShort: 'Zebec Dev',
    nativeToken: exports.solToken,
    rpcUrls: [{ http: 'https://api.zebec.eclipsenetwork.xyz:8899' }],
    blockExplorers: [],
    blocks: {
        confirmations: 1,
        reorgPeriod: 0,
        estimateBlockTime: 0.4,
    },
    isTestnet: true,
};
/**
 * Collection maps
 *
 * NOTE: When adding chains here, consider also adding the
 * corresponding chain logo images in the /sdk/logos/* folders
 */
exports.chainMetadata = {
    alfajores: exports.alfajores,
    arbitrum: exports.arbitrum,
    arbitrumgoerli: exports.arbitrumgoerli,
    avalanche: exports.avalanche,
    bsc: exports.bsc,
    bsctestnet: exports.bsctestnet,
    celo: exports.celo,
    ethereum: exports.ethereum,
    fuji: exports.fuji,
    goerli: exports.goerli,
    sepolia: exports.sepolia,
    moonbasealpha: exports.moonbasealpha,
    moonbeam: exports.moonbeam,
    mumbai: exports.mumbai,
    optimism: exports.optimism,
    optimismgoerli: exports.optimismgoerli,
    polygon: exports.polygon,
    gnosis: exports.gnosis,
    test1: exports.test1,
    test2: exports.test2,
    test3: exports.test3,
    solanadevnet: exports.solanadevnet,
    zbctestnet: exports.zbctestnet,
};
exports.chainIdToMetadata = Object.values(exports.chainMetadata).reduce((result, chain) => {
    result[chain.chainId] = chain;
    return result;
}, {});
exports.mainnetChainsMetadata = chains_1.Mainnets.map((chainName) => exports.chainMetadata[chainName]);
exports.testnetChainsMetadata = chains_1.Testnets.map((chainName) => exports.chainMetadata[chainName]);
//# sourceMappingURL=chainMetadata.js.map