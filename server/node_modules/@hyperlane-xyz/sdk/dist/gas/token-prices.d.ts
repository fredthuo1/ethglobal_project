import CoinGecko from 'coingecko-api';
import { ChainMetadata } from '../metadata/chainMetadataTypes';
import { ChainMap, ChainName } from '../types';
export interface TokenPriceGetter {
    getTokenPrice(chain: ChainName): Promise<number>;
    getTokenExchangeRate(base: ChainName, quote: ChainName): Promise<number>;
}
export type CoinGeckoInterface = Pick<CoinGecko, 'simple'>;
export type CoinGeckoSimpleInterface = CoinGecko['simple'];
export type CoinGeckoSimplePriceParams = Parameters<CoinGeckoSimpleInterface['price']>[0];
export type CoinGeckoResponse = ReturnType<CoinGeckoSimpleInterface['price']>;
type TokenPriceCacheEntry = {
    price: number;
    timestamp: Date;
};
declare class TokenPriceCache {
    protected cache: Map<ChainName, TokenPriceCacheEntry>;
    protected freshSeconds: number;
    protected evictionSeconds: number;
    constructor(freshSeconds?: number, evictionSeconds?: number);
    put(chain: ChainName, price: number): void;
    isFresh(chain: ChainName): boolean;
    fetch(chain: ChainName): number;
}
export declare class CoinGeckoTokenPriceGetter implements TokenPriceGetter {
    protected coinGecko: CoinGeckoInterface;
    protected cache: TokenPriceCache;
    protected metadata: ChainMap<ChainMetadata>;
    constructor(coinGecko: CoinGeckoInterface, expirySeconds?: number, chainMetadata?: ChainMap<{
        name: string;
        chainId: number;
        protocol: import("../metadata/chainMetadataTypes").ProtocolType;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("../metadata/chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
    }>);
    static withDefaultCoinGecko(expirySeconds?: number): CoinGeckoTokenPriceGetter;
    getTokenPrice(chain: ChainName): Promise<number>;
    getTokenExchangeRate(base: ChainName, quote: ChainName): Promise<number>;
    private getTokenPrices;
    private queryTokenPrices;
}
export {};
//# sourceMappingURL=token-prices.d.ts.map