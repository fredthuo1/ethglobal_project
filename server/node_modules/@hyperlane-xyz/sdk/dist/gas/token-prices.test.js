"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chains_1 = require("../consts/chains");
const testUtils_1 = require("../test/testUtils");
const token_prices_1 = require("./token-prices");
describe('TokenPriceGetter', () => {
    let tokenPriceGetter;
    let mockCoinGecko;
    const chainA = chains_1.Chains.ethereum, chainB = chains_1.Chains.polygon, priceA = 10, priceB = 5.5;
    before(async () => {
        mockCoinGecko = new testUtils_1.MockCoinGecko();
        // Origin token
        mockCoinGecko.setTokenPrice(chainA, priceA);
        // Destination token
        mockCoinGecko.setTokenPrice(chainB, priceB);
        tokenPriceGetter = new token_prices_1.CoinGeckoTokenPriceGetter(mockCoinGecko);
    });
    describe('getTokenPrice', () => {
        it('returns a token price', async () => {
            (0, chai_1.expect)(await tokenPriceGetter.getTokenPrice(chainA)).to.equal(priceA);
        });
        it('caches a token price', async () => {
            mockCoinGecko.setFail(chainA, true);
            (0, chai_1.expect)(await tokenPriceGetter.getTokenPrice(chainA)).to.equal(priceA);
            mockCoinGecko.setFail(chainA, false);
        });
    });
    describe('getTokenExchangeRate', () => {
        it('returns a value consistent with getTokenPrice()', async () => {
            const exchangeRate = await tokenPriceGetter.getTokenExchangeRate(chainA, chainB);
            const expectedExchangeRate = priceA / priceB;
            (0, chai_1.expect)(exchangeRate).to.equal(expectedExchangeRate);
        });
    });
});
//# sourceMappingURL=token-prices.test.js.map