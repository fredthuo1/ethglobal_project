"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperlaneIsmFactoryDeployer = void 0;
const debug_1 = __importDefault(require("debug"));
const HyperlaneDeployer_1 = require("../deploy/HyperlaneDeployer");
const objects_1 = require("../utils/objects");
const contracts_1 = require("./contracts");
class HyperlaneIsmFactoryDeployer extends HyperlaneDeployer_1.HyperlaneDeployer {
    constructor(multiProvider) {
        super(multiProvider, contracts_1.ismFactoryFactories, {
            logger: (0, debug_1.default)('hyperlane:IsmFactoryDeployer'),
        });
    }
    async deploy(config) {
        if ((0, objects_1.isObject)(config)) {
            return super.deploy(config);
        }
        else {
            return super.deploy(Object.fromEntries(config.map((c) => [c, true])));
        }
    }
    async deployContracts(chain) {
        const merkleRootMultisigIsmFactory = await this.deployContract(chain, 'merkleRootMultisigIsmFactory', []);
        const messageIdMultisigIsmFactory = await this.deployContract(chain, 'messageIdMultisigIsmFactory', []);
        const aggregationIsmFactory = await this.deployContract(chain, 'aggregationIsmFactory', []);
        const routingIsmFactory = await this.deployContract(chain, 'routingIsmFactory', []);
        return {
            merkleRootMultisigIsmFactory,
            messageIdMultisigIsmFactory,
            aggregationIsmFactory,
            routingIsmFactory,
        };
    }
}
exports.HyperlaneIsmFactoryDeployer = HyperlaneIsmFactoryDeployer;
//# sourceMappingURL=HyperlaneIsmFactoryDeployer.js.map