"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestCoreDeployer = void 0;
const core_1 = require("@hyperlane-xyz/core");
const chains_1 = require("../consts/chains");
const HyperlaneIsmFactory_1 = require("../ism/HyperlaneIsmFactory");
const testUtils_1 = require("../test/testUtils");
const HyperlaneCoreDeployer_1 = require("./HyperlaneCoreDeployer");
const TestCoreApp_1 = require("./TestCoreApp");
const contracts_1 = require("./contracts");
const testCoreFactories = {
    ...contracts_1.coreFactories,
    mailbox: new core_1.TestMailbox__factory(),
    interchainGasPaymaster: new core_1.TestInterchainGasPaymaster__factory(),
    testIsm: new core_1.TestMultisigIsm__factory(),
};
class TestCoreDeployer extends HyperlaneCoreDeployer_1.HyperlaneCoreDeployer {
    constructor(multiProvider) {
        const ismFactory = new HyperlaneIsmFactory_1.HyperlaneIsmFactory({}, multiProvider);
        super(multiProvider, ismFactory);
        this.multiProvider = multiProvider;
    }
    // deploy a test ISM instead of a real ISM
    async deployIsm(chain) {
        const testIsm = await this.deployContractFromFactory(chain, testCoreFactories.testIsm, 'testIsm', []);
        await testIsm.setAccept(true);
        return testIsm.address;
    }
    async deploy() {
        return super.deploy((0, testUtils_1.testCoreConfig)(chains_1.TestChains));
    }
    async deployApp() {
        return new TestCoreApp_1.TestCoreApp(await this.deploy(), this.multiProvider);
    }
}
exports.TestCoreDeployer = TestCoreDeployer;
//# sourceMappingURL=TestCoreDeployer.js.map