"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("@nomiclabs/hardhat-waffle");
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const sinon_1 = __importDefault(require("sinon"));
const chains_1 = require("../consts/chains");
const HyperlaneIsmFactory_1 = require("../ism/HyperlaneIsmFactory");
const HyperlaneIsmFactoryDeployer_1 = require("../ism/HyperlaneIsmFactoryDeployer");
const MultiProvider_1 = require("../providers/MultiProvider");
const testUtils_1 = require("../test/testUtils");
const HyperlaneCore_1 = require("./HyperlaneCore");
const HyperlaneCoreChecker_1 = require("./HyperlaneCoreChecker");
const HyperlaneCoreDeployer_1 = require("./HyperlaneCoreDeployer");
describe('core', async () => {
    let multiProvider;
    let deployer;
    let core;
    let contracts;
    let coreConfig;
    let ismFactory;
    before(async () => {
        const [signer] = await hardhat_1.ethers.getSigners();
        multiProvider = MultiProvider_1.MultiProvider.createTestMultiProvider({ signer });
        const ismFactoryDeployer = new HyperlaneIsmFactoryDeployer_1.HyperlaneIsmFactoryDeployer(multiProvider);
        const ismFactories = await ismFactoryDeployer.deploy(chains_1.TestChains);
        ismFactory = new HyperlaneIsmFactory_1.HyperlaneIsmFactory(ismFactories, multiProvider);
    });
    beforeEach(async () => {
        const [signer] = await hardhat_1.ethers.getSigners();
        // This is kind of awkward and really these tests shouldn't live here
        multiProvider = MultiProvider_1.MultiProvider.createTestMultiProvider({ signer });
        coreConfig = (0, testUtils_1.testCoreConfig)(chains_1.TestChains);
    });
    it('deploys', async () => {
        deployer = new HyperlaneCoreDeployer_1.HyperlaneCoreDeployer(multiProvider, ismFactory);
        contracts = await deployer.deploy(coreConfig);
        core = new HyperlaneCore_1.HyperlaneCore(contracts, multiProvider);
    });
    describe('failure modes', async () => {
        beforeEach(async () => {
            deployer = new HyperlaneCoreDeployer_1.HyperlaneCoreDeployer(multiProvider, ismFactory);
            const stub = sinon_1.default.stub(deployer, 'deployContracts');
            stub.withArgs('test3', sinon_1.default.match.any).rejects();
            // @ts-ignore
            deployer.deployContracts.callThrough();
            try {
                await deployer.deploy(coreConfig);
                // eslint-disable-next-line no-empty
            }
            catch (e) { }
        });
        afterEach(async () => {
            sinon_1.default.restore();
        });
        it('persists partial failure', async () => {
            (0, chai_1.expect)(deployer.deployedContracts).to.have.keys(['test1', 'test2']);
        });
        it('can be resumed from partial (chain) failure', async () => {
            sinon_1.default.restore(); // restore normal deployer behavior and test3 will be deployed
            const result = await deployer.deploy(coreConfig);
            (0, chai_1.expect)(result).to.have.keys(['test1', 'test2', 'test3']);
            (0, chai_1.expect)(result.test3).to.have.keys(Object.keys(result.test2));
        });
        it('can be resumed from partial contracts', async () => {
            sinon_1.default.restore(); // restore normal deployer behavior
            //@ts-ignore operand not optional, ignore for this test
            delete deployer.deployedContracts.test2.multisigIsm;
            //@ts-ignore operand not optional, ignore for this test
            delete deployer.deployedContracts.test2.mailbox;
            const result = await deployer.deploy(coreConfig);
            (0, chai_1.expect)(result.test2).to.have.keys(Object.keys(result.test1));
            (0, chai_1.expect)(result.test3).to.have.keys(Object.keys(result.test1));
        });
        it('times out ', async () => {
            // @ts-ignore
            deployer.chainTimeoutMs = 1;
            try {
                await deployer.deploy(coreConfig);
            }
            catch (e) {
                // TODO: figure out how to test specific error case
                // expect(e.message).to.include('Timed out in 1ms');
            }
        });
    });
    it('checks', async () => {
        const checker = new HyperlaneCoreChecker_1.HyperlaneCoreChecker(multiProvider, core, coreConfig, ismFactory);
        await checker.check();
    });
});
//# sourceMappingURL=CoreDeployer.hardhat-test.js.map