"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasRouterDeployer = void 0;
const HyperlaneRouterDeployer_1 = require("./HyperlaneRouterDeployer");
class GasRouterDeployer extends HyperlaneRouterDeployer_1.HyperlaneRouterDeployer {
    async enrollRemoteRouters(contractsMap, configMap, foreignRouters = {}) {
        await super.enrollRemoteRouters(contractsMap, configMap, foreignRouters);
        this.logger(`Setting enrolled router destination gas...`);
        for (const [chain, contracts] of Object.entries(contractsMap)) {
            const remoteDomains = await this.router(contracts).domains();
            const remoteChains = remoteDomains.map((domain) => this.multiProvider.getChainName(domain));
            const currentConfigs = await Promise.all(remoteDomains.map((domain) => this.router(contracts).destinationGas(domain)));
            const remoteConfigs = remoteDomains
                .map((domain, i) => ({
                domain,
                gas: configMap[remoteChains[i]].gas,
            }))
                .filter(({ gas }, index) => !currentConfigs[index].eq(gas));
            if (remoteConfigs.length == 0) {
                continue;
            }
            this.logger(`Set destination gas on ${chain} for ${remoteChains}`);
            await this.multiProvider.handleTx(chain, this.router(contracts).setDestinationGas(remoteConfigs));
        }
    }
}
exports.GasRouterDeployer = GasRouterDeployer;
//# sourceMappingURL=GasRouterDeployer.js.map